Local<ArrayBuffer> buffer = ArrayBuffer::New(...);
ArrayBuffer::Contents contents = buffer->GetContents();
memcpy(contents.Data(), <你的C++数据>);
Local<Uint8Array> typeArray =TypedArray::New(buffer, <buffer里的offset，填0，单位：字节>, <字节数>);

int Mail::send_mail(MSG_120203 &msg) {
	Game_Player *player = GAME_MANAGER->find_role_name_game_player(msg.receiver_name);
	if (!player) {
		return player_->respond_error_result(RES_SEND_MAIL, ERROR_ROLE_NOT_EXIST);
	}
	role_id_t receiver_id = player->game_player_info().role_id;
	if (receiver_id == mail_info_.role_id)
		return player_->respond_error_result(RES_SEND_MAIL, ERROR_CLIENT_PARAM);
	if (msg.mail_detail.mail_title.size() > 64 || msg.mail_detail.mail_content.size() > 512)
		return player_->respond_error_result(RES_SEND_MAIL, ERROR_CLIENT_PARAM);

	std::vector<Money_Sub_Info> money_sub_list;
	if (msg.mail_detail.money_info.copper > 0)
		money_sub_list.push_back(Money_Sub_Info(COPPER_ONLY, msg.mail_detail.money_info.copper));
	if (msg.mail_detail.money_info.gold > 0)
		money_sub_list.push_back(Money_Sub_Info(GOLD_ONLY, msg.mail_detail.money_info.gold));
	int result = player_->bag().bag_sub_money(money_sub_list);
	if (result != 0)
		return player_->respond_error_result(RES_SEND_MAIL, result);

	player_->send_mail(receiver_id, msg.mail_detail);
	return player_->respond_success_result(RES_SEND_MAIL);
}
